{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","state","currentItem","addItem","bind","handleInput","preventDefault","newItem","this","console","log","setState","Date","now","filteredItems","filter","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUAyCeA,MApCf,SAAmBC,GAClB,IACMC,EADQD,EAAME,MACIC,KAAI,SAACC,GAC5B,OACC,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC/B,2BACC,2BACCC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GACVZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAGvC,8BACC,kBAAC,IAAD,CACCD,UAAU,UACVU,QAAS,WACRf,EAAMgB,WAAWZ,EAAKE,MAEvBW,KAAK,gBAOX,OACC,6BACC,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC9BlB,K,eC7BLmB,IAAQC,IAAIC,K,IAuFGC,E,kDArFd,WAAYvB,GAAQ,IAAD,8BAClB,cAAMA,IACDwB,MAAQ,CACZtB,MAAO,GACPuB,YAAa,CACZf,KAAM,GACNJ,IAAK,KAGP,EAAKoB,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZC,E,oDAeXf,GAEPA,EAAEiB,iBACF,IAAMC,EAAUC,KAAKP,MAAMC,YAE3B,GADAO,QAAQC,IAAIH,GACS,KAAjBA,EAAQpB,KAAa,CACxB,IAAMR,EAAK,sBAAO6B,KAAKP,MAAMtB,OAAlB,CAAyB4B,IACpCC,KAAKG,SAAS,CACbhC,MAAOA,EACPuB,YAAa,CACZf,KAAM,GACNJ,IAAK,S,kCAMGM,GACXmB,KAAKG,SAAS,CACbT,YAAa,CACZf,KAAME,EAAEE,OAAOL,MACfH,IAAK6B,KAAKC,W,iCAKF9B,GACV,IAAM+B,EAAgBN,KAAKP,MAAMtB,MAAMoC,QAAO,SAAClC,GAAD,OAAUA,EAAKE,MAAQA,KACrEyB,KAAKG,SAAS,CACbhC,MAAOmC,M,gCAIC3B,EAAMJ,GACf,IAAMJ,EAAQ6B,KAAKP,MAAMtB,MACzBA,EAAMC,KAAI,SAACC,GACNA,EAAKE,MAAQA,IAEhBF,EAAKM,KAAOA,MAGdqB,KAAKG,SAAS,CACbhC,MAAOA,M,+BAKR,OACC,yBAAKG,UAAU,OACd,gCACC,0BAAMG,GAAG,aAAa+B,SAAUR,KAAKL,SACpC,2BACCnB,KAAK,OACLiC,YAAY,aACZ/B,MAAOsB,KAAKP,MAAMC,YAAYf,KAC9BC,SAAUoB,KAAKH,cAEhB,4BAAQrB,KAAK,UAAb,SAGF,kBAAC,EAAD,CACCL,MAAO6B,KAAKP,MAAMtB,MAClBc,WAAYe,KAAKf,WACjBH,UAAWkB,KAAKlB,iB,GA/EH4B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.bb86b7b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n\tconst items = props.items;\r\n\tconst listItems = items.map((item) => {\r\n\t\treturn (\r\n\t\t\t<div className='list' key={item.key}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tid={item.key}\r\n\t\t\t\t\t\tvalue={item.text}\r\n\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\tprops.setUpdate(e.target.value, item.key);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\tclassName='faicons'\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tprops.deleteItem(item.key);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\ticon='trash'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<FlipMove duration={300} easing='ease-in-out'>\r\n\t\t\t\t{listItems}\r\n\t\t\t</FlipMove>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\titems: [],\n\t\t\tcurrentItem: {\n\t\t\t\ttext: '',\n\t\t\t\tkey: '',\n\t\t\t},\n\t\t};\n\t\tthis.addItem = this.addItem.bind(this);\n\t\tthis.handleInput = this.handleInput.bind(this);\n\t\tthis.deleteItem = this.deleteItem.bind(this);\n\t\tthis.setUpdate = this.setUpdate.bind(this);\n\t}\n\n\taddItem(e) {\n\t\t// preventDefault-> to prevent refreshing page every time button is clicked.\n\t\te.preventDefault();\n\t\tconst newItem = this.state.currentItem;\n\t\tconsole.log(newItem);\n\t\tif (newItem.text !== '') {\n\t\t\tconst items = [...this.state.items, newItem];\n\t\t\tthis.setState({\n\t\t\t\titems: items,\n\t\t\t\tcurrentItem: {\n\t\t\t\t\ttext: '',\n\t\t\t\t\tkey: '',\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\n\thandleInput(e) {\n\t\tthis.setState({\n\t\t\tcurrentItem: {\n\t\t\t\ttext: e.target.value,\n\t\t\t\tkey: Date.now(),\n\t\t\t},\n\t\t});\n\t}\n\n\tdeleteItem(key) {\n\t\tconst filteredItems = this.state.items.filter((item) => item.key !== key);\n\t\tthis.setState({\n\t\t\titems: filteredItems,\n\t\t});\n\t}\n\n\tsetUpdate(text, key) {\n\t\tconst items = this.state.items;\n\t\titems.map((item) => {\n\t\t\tif (item.key === key) {\n\t\t\t\t// console.log(item.key + '    ' + key);\n\t\t\t\titem.text = text;\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\titems: items,\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<header>\n\t\t\t\t\t<form id='to-do-form' onSubmit={this.addItem}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tplaceholder='Enter task'\n\t\t\t\t\t\t\tvalue={this.state.currentItem.text}\n\t\t\t\t\t\t\tonChange={this.handleInput}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button type='submit'>Add</button>\n\t\t\t\t\t</form>\n\t\t\t\t</header>\n\t\t\t\t<ListItems\n\t\t\t\t\titems={this.state.items} //props\n\t\t\t\t\tdeleteItem={this.deleteItem}\n\t\t\t\t\tsetUpdate={this.setUpdate}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}